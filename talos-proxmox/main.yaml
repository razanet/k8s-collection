---
# main.yaml
- name: Deploy Talos Cluster on Proxmox
  hosts: proxmox_host
  gather_facts: true
  vars:
    proxmox_node: "pve"
    talos_version: "v1.5.5"
    iso_storage: "local"
    talos_config_dir: "./talos-config"
    controlplane_vip: "192.168.0.200"
    gateway: "192.168.0.1"
    dns_server: "192.168.0.2"
    nodes:
      - name: "talos-cp1"
        role: "controlplane"
        vm_id: "201"
        memory: "4096"
        cores: "2"
        disk_size: "32G"
        ip: "192.168.0.201"
      - name: "talos-cp2"
        role: "controlplane"
        vm_id: "202"
        memory: "4096"
        cores: "2"
        disk_size: "32G"
        ip: "192.168.0.202"
      - name: "talos-cp3"
        role: "controlplane"
        vm_id: "203"
        memory: "4096"
        cores: "2"
        disk_size: "32G"
        ip: "192.168.0.203"

  tasks:
    - name: Download Talos ISO
      get_url:
        url: "https://github.com/talos-systems/talos/releases/download/{{ talos_version }}/metal-amd64.iso"
        dest: "/tmp/talos.iso"
      register: iso_download

    - name: Upload ISO to Proxmox
      community.general.proxmox_disk_image:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ proxmox_node }}"
        storage: "{{ iso_storage }}"
        filename: "talos-{{ talos_version }}.iso"
        src: "/tmp/talos.iso"
        content: "iso"
      when: iso_download.changed

    - name: Create config patches directory
      file:
        path: "{{ talos_config_dir }}/patches"
        state: directory
        mode: '0755'

    - name: Create controlplane patch for each node
      template:
        src: controlplane-patch.yaml.j2
        dest: "{{ talos_config_dir }}/patches/controlplane-patch-{{ item.ip }}.yaml"
      loop: "{{ nodes }}"

    - name: Generate Talos configurations
      command: |
        talosctl gen config \
          "{{ cluster_name }}" \
          "https://{{ controlplane_vip }}:6443" \
          --output-dir {{ talos_config_dir }} \
          --with-docs=false \
          --with-examples=false
      args:
        creates: "{{ talos_config_dir }}/controlplane.yaml"

    - name: Create VMs
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ proxmox_node }}"
        name: "{{ item.name }}"
        vmid: "{{ item.vm_id }}"
        memory: "{{ item.memory }}"
        cores: "{{ item.cores }}"
        net:
          net0: 'model=virtio,bridge=vmbr0'
        ostype: "l26"
        state: present
        description: "Talos node deployed via Ansible"
      loop: "{{ nodes }}"

    - name: Create and attach disks
      community.general.proxmox_disk:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        vmid: "{{ item.vm_id }}"
        node: "{{ proxmox_node }}"
        storage: "local-lvm"
        size: "{{ item.disk_size }}"
        format: raw
        state: present
      loop: "{{ nodes }}"

    - name: Start VMs
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ proxmox_node }}"
        name: "{{ item.name }}"
        state: started
      loop: "{{ nodes }}"

    - name: Wait for Talos API on all nodes
      wait_for:
        host: "{{ item.ip }}"
        port: 50000
        timeout: 300
      loop: "{{ nodes }}"

    - name: Apply Talos configuration to nodes
      command: |
        talosctl --nodes {{ item.ip }} \
                --config {{ talos_config_dir }}/talosconfig \
                apply-config \
                --file {{ talos_config_dir }}/controlplane.yaml \
                --config-patch @{{ talos_config_dir }}/patches/controlplane-patch-{{ item.ip }}.yaml
      loop: "{{ nodes }}"
      register: talos_config_result
      until: talos_config_result.rc == 0
      retries: 5
      delay: 30

    - name: Wait for all nodes to be ready
      command: |
        talosctl --nodes {{ item.ip }} \
                --config {{ talos_config_dir }}/talosconfig \
                health
      loop: "{{ nodes }}"
      register: talos_health
      until: talos_health.rc == 0
      retries: 10
      delay: 30