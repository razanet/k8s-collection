- name: Deploy Talos Cluster on Proxmox
  hosts: localhost
  gather_facts: false
  vars_files:
    - group_vars/vault.yml
  vars:
    proxmox_node: "pve-bijok01"
    talos_version: "v1.5.5"
    iso_storage: "isos"
    iso_filename: "talos-{{ talos_version }}.iso"
    storage: "datastore01"
    talos_config_dir: "./talos-config"
    controlplane_vip: "192.168.0.200"
    gateway: "192.168.0.1"
    dns_server: "192.168.0.2"
    ssh_public_key: "/Users/wakbijak/Nextcloud/DevOps/keys/arif.pub"
    serial: 1
    nodes:
      - name: "talos-cp1"
        role: "controlplane"
        vm_id: "203"
        memory: "4096"
        cores: "2"
        ip: "192.168.0.201"
      - name: "talos-cp2"
        role: "controlplane"
        vm_id: "204"
        memory: "4096"
        cores: "2"
        ip: "192.168.0.202"
      - name: "talos-cp3"
        role: "controlplane"
        vm_id: "205"
        memory: "4096"
        cores: "2"
        ip: "192.168.0.203"

  tasks:
    - name: Check if Talos ISO exists on Proxmox
      ansible.builtin.stat:
        path: "/mnt/pve/isos/template/iso/{{ iso_filename }}"
      register: iso_stat
      delegate_to: "{{ proxmox_api_host }}"

    - name: Download Talos ISO directly on Proxmox
      command: |
        wget https://github.com/talos-systems/talos/releases/download/{{ talos_version }}/metal-amd64.iso -O /mnt/pve/isos/template/iso/{{ iso_filename }}
      become: true
      become_user: root
      delegate_to: "{{ proxmox_api_host }}"
      when: not iso_stat.stat.exists

    - name: Create cloud-init config directory on Proxmox
      file:
        path: "/var/lib/vz/snippets"
        state: directory
        mode: '0755'
      delegate_to: "{{ proxmox_api_host }}"
      become: true

    - name: Generate cloud-init config for each node
      copy:
        dest: "/var/lib/vz/snippets/{{ item.name }}.yml"
        content: |
          #cloud-config
          hostname: {{ item.name }}
          manage_etc_hosts: true
          users:
            - name: talos
              sudo: ALL=(ALL) NOPASSWD:ALL
              ssh_authorized_keys:
                - {{ lookup('file', ssh_public_key) }}
          write_files:
            - path: /etc/systemd/network/10-static.network
              content: |
                [Match]
                Name=eth0

                [Network]
                Address={{ item.ip }}/24
                Gateway={{ gateway }}
                DNS={{ dns_server }}
          network:
            version: 2
            ethernets:
              eth0:
                dhcp4: false
                addresses: [{{ item.ip }}/24]
                gateway4: {{ gateway }}
                nameservers:
                  addresses: [{{ dns_server }}]
          bootcmd:
            - [ sh, -c, 'echo "network: {config: disabled}" > /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg' ]
            - [ sh, -c, 'systemctl restart systemd-networkd' ]
      loop: "{{ nodes }}"
      delegate_to: "{{ proxmox_api_host }}"
      become: true

    - name: Create VMs on Proxmox
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ proxmox_node }}"
        name: "{{ item.name }}"
        vmid: "{{ item.vm_id }}"
        memory: "{{ item.memory }}"
        cores: "{{ item.cores }}"
        net:
          net0: 'model=virtio,bridge=vmbr0'
        scsi:
          scsi0: "{{storage}}:32"
        scsihw: "virtio-scsi-single"
        ide:
          ide2: "{{iso_storage}}:iso/{{ iso_filename }},media=cdrom"
        cicustom: "user=local:snippets/{{ item.name }}.yml"
        ostype: "l26"
        cpu: host
        state: present
        description: "Talos node deployed via Ansible"
      loop: "{{ nodes }}"

    - name: Pause to ensure VM creation is complete
      pause:
        seconds: 10

    - name: Start VMs
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_password }}"
        node: "{{ proxmox_node }}"
        name: "{{ item.name }}"
        state: started
      loop: "{{ nodes }}"

    - name: Wait for Talos API on all nodes
      wait_for:
        host: "{{ item.ip }}"
        port: 50000
        timeout: 300
      loop: "{{ nodes }}"

    - name: Apply Talos configuration to nodes
      command: |
        talosctl --nodes {{ item.ip }} \
                --talosconfig {{ talos_config_dir }}/talosconfig \
                apply-config \
                --file {{ talos_config_dir }}/controlplane.yaml \
                --config-patch @{{ talos_config_dir }}/patches/controlplane-patch-{{ item.ip }}.yaml
      loop: "{{ nodes }}"
      register: talos_config_result
      until: talos_config_result.rc == 0
      retries: 5
      delay: 30

    - name: Wait for all nodes to be healthy
      command: |
        talosctl --nodes {{ item.ip }} \
                --config {{ talos_config_dir }}/talosconfig \
                health
      loop: "{{ nodes }}"
      register: talos_health
      until: talos_health.rc == 0
      retries: 10
      delay: 30